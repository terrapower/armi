# Copyright 2019 TerraPower, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: skip-file
# -*- coding: utf-8 -*-
#
# ARMI documentation build configuration file, created by
# sphinx-quickstart on Wed Apr 02 11:36:09 2014.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import datetime
import os
import sys
import subprocess
import shutil
import inspect
from io import StringIO

import sphinx_rtd_theme
from docutils.parsers.rst import Directive, directives
from docutils import nodes, statemachine

import armi
from armi import apps

# Configure the baseline framework "App" for framework doc building
armi.configure(apps.App())


def create_figure(path, caption=None, align=None, alt=None, width=None):
    """
    This method is available within ``.. exec::``. It allows someone to create a figure with a
    caption.
    """
    rst = [".. figure:: {}".format(path)]
    if align:
        rst += ["    :align: {}".format(align)]
    if alt:
        rst += ["    :alt: {}".format(alt)]
    if width:
        rst += ["    :width: {}".format(width)]
    if caption:
        rst += [""]
    if caption:
        rst += ["    {}".format(caption)]
    return rst


def create_table(rst_table, caption=None, align=None, widths=None, width=None):
    """
    This method is available within ``.. exec::``. It allows someone to create a table with a
    caption.

    The ``rst_table``
    """
    try:
        rst = [".. table:: {}".format(caption or "")]
        if align:
            rst += ["    :align: {}".format(align)]
        if width:
            rst += ["    :width: {}".format(width)]
        if widths:
            rst += ["    :widths: {}".format(widths)]
        rst += [""]
        rst += ["    " + line for line in rst_table.split("\n")]
        return "\n".join(rst)
    except:
        raise Exception("crap, crap crap!")


class ExecDirective(Directive):
    """Execute the specified python code and insert the output into the document.

    The code is used as the body of a method, and must return a ``str``. The string result is
    interpreted as reStructuredText.
    """

    has_content = True

    def run(self):
        try:
            code = inspect.cleandoc(
                """
            def usermethod():
                {}
            """
            ).format("\n    ".join(self.content))
            exec(code)
            result = locals()["usermethod"]()

            if result is None:
                raise Exception(
                    "Return value needed! The body of your `.. exec::` is used as a "
                    "function call that must return a value."
                )

            para = nodes.container()
            # tab_width = self.options.get('tab-width', self.state.document.settings.tab_width)
            lines = statemachine.StringList(result.split("\n"))
            self.state.nested_parse(lines, self.content_offset, para)
            return [para]
        except Exception as e:
            docname = self.state.document.settings.env.docname
            return [
                nodes.error(
                    None,
                    nodes.paragraph(
                        text="Unable to execute python code at {}:{} ... {}".format(
                            docname, self.lineno, datetime.datetime.now()
                        )
                    ),
                    nodes.paragraph(text=str(e)),
                    nodes.literal_block(text=str(code)),
                )
            ]


class PyReverse(Directive):
    """Runs pyreverse to generate UML for specified module name and options.

    The directive accepts the same arguments as pyreverse, except you should not specify
    ``--project`` or ``-o`` (output format). These are automatically specified.

    If you pass ``-c`` to this, the figure generated is forced to be the className.png
    like ``BurnMatrix.png``. For .gitignore purposes, this is a pain. Thus, we
    auto-prefix ALL images generated by this directive with ``pyrev_``.
    """

    has_content = True
    required_arguments = 1
    optional_arguments = 50
    option_spec = {
        "alt": directives.unchanged,
        "height": directives.length_or_percentage_or_unitless,
        "width": directives.length_or_percentage_or_unitless,
        "align": lambda arg: directives.choice(arg, ("left", "right", "center")),
        "filename": directives.unchanged,
    }

    def run(self):
        stdStreams = sys.stdout, sys.stderr
        sys.stdout, sys.stderr = StringIO(), StringIO()
        try:
            args = list(self.arguments)
            args.append("--project {}".format(args[0]))
            args.append("-opng")

            # cannot use "pylint.pyreverse.main.Run" because it calls `sys.exit`. why?
            fig_name = self.options.get("filename", "classes_{}.png".format(args[0]))
            command = r"python -m pylint.pyreverse.main {}".format(" ".join(args))
            print("Running {}".format(command))
            subprocess.check_call(command)

            try:
                os.remove(os.path.join(APIDOC_DIR, fig_name))
            except:
                pass

            shutil.move(fig_name, APIDOC_DIR)
            # add .gitignore helper prefix
            shutil.move(
                os.path.join(APIDOC_DIR, fig_name),
                os.path.join(APIDOC_DIR, f"pyr_{fig_name}"),
            )
            new_content = [f".. figure:: /{APIDOC_REL}/pyr_{fig_name}"]

            # assume we don't need the packages_, and delete.
            try:
                os.remove("packages_{}.png".format(args[0]))
            except:
                pass

            # pass the other args through (figure args like align)
            for opt, val in self.options.items():
                if opt in ("filename",):
                    continue
                new_content.append("    :{}: {}\n".format(opt, val))

            new_content.append("\n")

            for line in self.content:
                new_content.append("    " + line)

            para = nodes.container()
            # tab_width = self.options.get('tab-width', self.state.document.settings.tab_width)
            lines = statemachine.StringList(new_content)
            self.state.nested_parse(lines, self.content_offset, para)
            return [para]
        except Exception as e:
            docname = self.state.document.settings.env.docname
            return [
                nodes.error(
                    None,
                    nodes.paragraph(
                        text="Unable to generate figure from {}:{} with command {} ... {}".format(
                            docname, self.lineno, command, datetime.datetime.now()
                        )
                    ),
                    nodes.paragraph(text=str(e)),
                    nodes.literal_block(text=str(sys.stdout.getvalue())),
                    nodes.literal_block(text=str(sys.stderr.getvalue())),
                )
            ]
        finally:
            sys.stdout, sys.stderr = stdStreams


APIDOC_REL = ".apidocs"
SOURCE_DIR = os.path.join("..", "armi")
APIDOC_DIR = APIDOC_REL


def setup(app):
    """Method to make `python setup.py build_sphinx` generate api documentation"""
    app.add_directive("exec", ExecDirective)
    app.add_directive("pyreverse", PyReverse)


# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath(".."))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.napoleon",
    "sphinx.ext.autosummary",
    "sphinx.ext.doctest",
    "sphinx.ext.todo",
    "sphinx.ext.mathjax",
    "sphinx.ext.ifconfig",
    "sphinx.ext.inheritance_diagram",
    "sphinx.ext.extlinks",
    "sphinx.ext.viewcode",
    "sphinxcontrib.apidoc",
    "nbsphinx",
    "nbsphinx_link",
]

# private-member docs are generally not great to link to in high-level implementation documentation
# because the implementation may change rapidly. Prefer putting info in public entities. We
# may render docs with private-members shown in some rare cases to get the full (and noisy!) documentation.
autodoc_default_options = {
    "members": True,
    "undoc-members": True,
}  # , 'private-members']
autodoc_member_order = "bysource"
autoclass_content = "both"

apidoc_module_dir = SOURCE_DIR
apidoc_output_dir = APIDOC_REL
apidoc_excluded_paths = ["tests", "*/test*"]
apidoc_separate_modules = True
apidoc_module_first = True

# Napoleon settings listed here so we know what's configurable and can track changes (for numpy docstrings)
napoleon_google_docstring = False
napoleon_numpy_docstring = True
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = False
napoleon_include_special_with_doc = True
napoleon_use_admonition_for_examples = False
napoleon_use_admonition_for_notes = True
napoleon_use_admonition_for_references = False
napoleon_use_ivar = False
napoleon_use_param = True
napoleon_use_rtype = True

nbsphinx_kernel_name = "python"

# Add any paths that contain templates here, relative to this directory.
templates_path = [".templates"]

# The suffix of source filenames.
source_suffix = ".rst"

# The encoding of source files.
# source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "ARMI"
copyright = "2009-{}, TerraPower, LLC".format(datetime.datetime.now().year)

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
import armi

version = armi.__version__  #'.'.join(armi.__version__.split('.')[:2])
# The full version, including alpha/beta/rc tags.
release = armi.__version__

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
# language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
# today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
"""
'library/xml.rst' – ignores the library/xml.rst file (replaces entry in unused_docs)
'library/xml' – ignores the library/xml directory (replaces entry in exclude_trees)
'library/xml*' – ignores all files and directories starting with library/xml
'**/.svn' – ignores all .svn directories (replaces entry in exclude_dirnames)
"""
exclude_patterns = ["**/Python27*", "**/ccl*", "**.ipynb_checkpoints"]  # , '**/tests*']

# The reST default role (used for this markup: `text`) to use for all documents.
# default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
# add_function_parentheses = True

rst_epilog = r"""
.. |currentArmi| replace:: ``\\albert\apps\dev\armi\master``
.. |keff| replace:: k\ :sub:`eff`\
"""

wiki = {"phabricator": ("https://ubuntuprod.tp.int" + "%s", None)}

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
# show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# A list of ignored prefixes for module index sorting.
# modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = "sphinx_rtd_theme"

# (Optional) Logo. Should be small enough to fit the navbar (ideally 24x24).
# Path should be relative to the ``_static`` files directory.
html_logo = os.path.join(".static", "armiicon_24x24.ico")

# Theme options are theme-specific and customize the look and feel of a theme further.
# html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
# html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
# html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
# html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = os.path.join(".static", "armiicon_16x16.ico")

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = [".static"]

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = "%Y-%m-%d"

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
# html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
# html_sidebars = {'**': ['localtoc.html']} # enable this is you want a sidebar nav, it doesn't work super super well though, more options for functionality include - 'sourcelink.html', 'searchbox.html'

# Additional templates that should be rendered to pages, maps page names to
# template names.
# html_additional_pages = {}

# If false, no module index is generated.
# html_domain_indices = True

# If false, no index is generated.
# html_use_index = True

# If true, the index is split into individual pages for each letter.
# html_split_index = False

# If true, links to the reST sources are added to the pages.
# html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
# html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
# html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
# html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
# html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = "ARMIdoc"

html_context = {
    "css_files": ["_static/theme_fixes.css"]  # overrides for wide tables in RTD theme
}

# -- Options for LaTeX output --------------------------------------------------
latex_engine = "xelatex"

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    "preamble": r"\usepackage{amsmath} \usepackage{wasysym}"
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual], toctree_only).
latex_documents = [
    (
        "index",
        "ARMI.tex",
        "Advanced Reactor Modeling Interface (ARMI) Manual",
        "TerraPower, LLC",
        "manual",
        False,
    )
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
latex_logo = os.path.join(".static", "armi-logo.png")

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
latex_toplevel_sectioning = "part"

# If true, show page references after internal links.
latex_show_pagerefs = True

# If true, show URL addresses after external links.
latex_show_urls = "inline"

# Documents to append as an appendix to all manuals.
latex_appendices = []

# If false, no module index is generated.
latex_domain_indices = ["py-modindex"]
