[tox]
envlist = py38,lint,cov
requires =
	pip >= 20.2

[testenv]
basepython = {env:PYTHON3_PATH:python3}
setenv =
    PYTHONPATH = {toxinidir}
    USERNAME = armi

[testenv:test]
commands =
    pip install -e .[memprof,mpi,test]
    pytest -n 4 armi

[testenv:doc]
allowlist_externals =
    /usr/bin/git
    /usr/bin/make
changedir = doc
commands =
    pip install -e ..[memprof,mpi,test,docs]
    git submodule init
    git submodule update
    make html

# First, run code coverage over the unit tests that run MPI library code.
[testenv:cov1]
deps=
    mpi4py
allowlist_externals =
    /usr/bin/mpiexec
commands =
    pip install -e .[memprof,mpi,test]
    mpiexec -n 2 --use-hwthread-cpus coverage run --rcfile=.coveragerc -m pytest --cov=armi --cov-config=.coveragerc --cov-report=lcov --ignore=venv --cov-fail-under=80 armi/tests/test_mpiFeatures.py

# Second, run code coverage over the rest of the unit tests, and combine the coverage results together
[testenv:cov2]
deps=
    mpi4py
allowlist_externals =
    /usr/bin/mpiexec
commands =
    pip install -e .[memprof,mpi,test]
    coverage run --rcfile=.coveragerc -m pytest -n 4 --cov=armi --cov-config=.coveragerc --cov-report=lcov --cov-append --ignore=venv armi
    coverage combine --rcfile=.coveragerc --keep -a

# NOTE: This only runs the MPI unit tests.
# NOTE: This will only work in POSIX/BASH Linux.
[testenv:mpitest]
deps=
    mpi4py
allowlist_externals =
    /usr/bin/mpiexec
commands =
    pip install -e .[memprof,mpi,test]
    mpiexec -n 2 --use-hwthread-cpus pytest armi/tests/test_mpiFeatures.py

[testenv:lint]
deps=
    ruff==0.0.272
commands =
    ruff .

[testenv:report]
skip_install = true
deps=
    mpi4py
commands =
    coverage report
    coverage html

[testenv:manifest]
basepython = {env:PYTHON3_PATH:python3}
setenv =
    PYTHONPATH = {toxinidir}
    USERNAME = armi
commands =
    python .github/workflows/validatemanifest.py

[testenv:clean]
deps = coverage
skip_install = true
commands = coverage erase
