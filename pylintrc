[MESSAGES CONTROL]

# ** Reasons disabled **
# bad-whitespace: Not well justified. Need autoformatter.
# trailing-whitespace: Not well justified.
# missing-param-doc: Not well justified
# missing-type-doc: Not well justified
# missing-return-type-doc: Not well justified
# docstring-first-line-empty: Triggers on multi-line docstrings
# locally-disabled: It's appropriate to decide to violate pylint sometimes
# superfluous-parens: Python 2 and 3 compatibility
# too-many-locals: annoying
# bad-continuation: https://github.com/ambv/black/issues/48
# too-many-instance-attributes: Some of our classes are big and could use refactoring, but this can
#     be a bit overzealous
# too-many-*: ditto above
# missing-return-doc: Pylint doesnt appear to support numpydoc return specs
# too-few-public-methods: Strage issue for a language that seems to promote type-as-data as a
#     popular idiom
# useless-object-inheritance: New-style classes in python 2
# no-else-return: multiple return statements are not considered bad practice
# duplicate-code: The duplicate code pylint founds is just not interesting.
# invalid-name: frequently, scientifically-meaningful names do not apply to these rules
# line-too-long: we rely on black to handle this
# logging-format-interpolation: this rule seems arbitrary and useless
disable =
    bad-whitespace,
    trailing-whitespace,
    missing-param-doc,
    missing-type-doc,
    missing-return-type-doc,
    docstring-first-line-empty,
    bad-mcs-classmethod-argument,
    locally-disabled,
    superfluous-parens,
    too-many-locals,
    bad-continuation,
    too-many-instance-attributes,
    too-many-arguments,
    too-many-statements,
    too-many-lines,
    too-many-branches,
    missing-return-doc,
    too-few-public-methods,
    useless-object-inheritance,
    no-else-return,
    duplicate-code,
    invalid-name,
    line-too-long,
    logging-format-interpolation

[BASIC]
dummy-variables-rgx=_[a-zA-Z_]*
# Regular expression which should only match functions or classes name which do
# not require a docstring
no-docstring-rgx=^_|^test_
docstring-min-length=5

# Regular expression which should only match correct module names
module-rgx=^((test|ip|at|ec)_)?[a-z][a-zA-Z0-9]*$

# Regular expression which should only match correct module level names
const-rgx=^(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Regular expression which should only match correct class names
class-rgx=^[A-Z_][a-zA-Z0-9]+$

# Regular expression which should only match correct function names
function-rgx=^[a-z_][a-zA-Z0-9_]{2,}$

# Regular expression which should only match correct method names
method-rgx=^[a-z_][a-zA-Z0-9_]{2,}$

# Regular expression which should only match correct instance attribute names
attr-rgx=^([ora]|[a-z_][a-zA-Z0-9_]{1,30})$

# Regular expression which should only match correct argument names
argument-rgx=^([ora]|[a-z_][a-zA-Z0-9_]{1,30})$

# Regular expression which should only match correct variable names
variable-rgx=^([ora]|[a-z_][a-zA-Z0-9_]{1,30})$

# Regular expression which should only match correct list comprehension /
# generator expression variable names
inlinevar-rgx=^[A-Za-z_][A-Za-z0-9_]*$

# Good variable names which should always be accepted, separated by a comma
good-names=o,r,g,a,_,b,c,f,i,j,k,x,y,z,s,t,n,m,p,N,D,G

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata

# List of builtins function names that should not be used, separated by a comma
bad-functions=apply,input,super

[FORMAT]
# Maximum number of characters on a single line.
max-line-length=120

[MASTER]
unsafe-load-any-extensions=yes
load-plugins=pylint.extensions.docparams,pylint.extensions.docstyle
extension-pkg-whitelist=armi.reactor.composites,armi.materials,numpy,pylab,pyodbc,mpi4py.MPI,matplotlib.cm.jet,pyodbc,scipy,wx

[TYPECHECK]
ignored-modules = numpy,mpi4py.MPI
ignored-classes = argparse.Namespace

[MISCELLANEOUS]
# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX
